{"ast":null,"code":"var _jsxFileName = \"/Users/trevor/Documents/projects/front-end/co-make/src/components/Login.js\";\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { Form, Button, Label, Input, FormGroup } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { setLoggedIn } from '../store/actions/userActions';\nimport axios from 'axios';\n\nfunction Login(props) {\n  const {\n    setLoggedIn\n  } = props;\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm({\n    mode: \"onBlur\",\n    defaultValues: {\n      email: \"\",\n      password: \"\"\n    }\n  });\n\n  const loginPost = user => {\n    axios.post('https://comake-backend-tt76.herokuapp.com/auth/login', user).then(res => {\n      window.localStorage.setItem('token', res.data.token);\n      alert(\"You've successfully signed in!!\");\n      setLoggedIn();\n    }).catch(error => {\n      console.log(\"There was an error logging into the server\", error);\n    });\n  };\n\n  const onSubmit = data => {\n    loginPost(data);\n    reset();\n  }; //console.log(\"MY ERRORS FROM LOG FORM=>\", errors)\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"auth-form-container  shadow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"email\",\n    placeholder: \"email\",\n    name: \"email\",\n    invalid: errors.email ? true : false,\n    innerRef: register({\n      required: \"Email is required\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    errors: errors,\n    name: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    invalid: errors.password ? true : false,\n    innerRef: register({\n      required: \"Password is required.\",\n      maxLength: 100\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    errors: errors,\n    name: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, \"Sign In\")));\n}\n\nexport default connect(null, {\n  setLoggedIn\n})(Login);","map":{"version":3,"sources":["/Users/trevor/Documents/projects/front-end/co-make/src/components/Login.js"],"names":["React","useForm","ErrorMessage","Form","Button","Label","Input","FormGroup","connect","setLoggedIn","axios","Login","props","register","handleSubmit","errors","reset","mode","defaultValues","email","password","loginPost","user","post","then","res","window","localStorage","setItem","data","token","alert","catch","error","console","log","onSubmit","required","maxLength"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAAQC,IAAR,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoCC,SAApC,QAAoD,YAApD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAElB,QAAM;AAAEH,IAAAA;AAAF,MAAkBG,KAAxB;AAEA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA;AAAlC,MAA4Cf,OAAO,CAAC;AACxDgB,IAAAA,IAAI,EAAE,QADkD;AAExDC,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAC;AAFE;AAFyC,GAAD,CAAzD;;AAQA,QAAMC,SAAS,GAAIC,IAAD,IAAU;AAC1BZ,IAAAA,KAAK,CAACa,IAAN,CAAW,sDAAX,EAAmED,IAAnE,EACCE,IADD,CACOC,GAAD,IAAS;AACbC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCH,GAAG,CAACI,IAAJ,CAASC,KAA9C;AACAC,MAAAA,KAAK,CAAC,iCAAD,CAAL;AACAtB,MAAAA,WAAW;AACZ,KALD,EAMCuB,KAND,CAMQC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DF,KAA1D;AACD,KARD;AASD,GAVD;;AAYA,QAAMG,QAAQ,GAAIP,IAAD,IAAU;AACzBR,IAAAA,SAAS,CAACQ,IAAD,CAAT;AACAb,IAAAA,KAAK;AACN,GAHD,CAxBkB,CA4BpB;;;AAIC,sBACA;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEF,YAAY,CAACsB,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,oBAAC,KAAD;AACA,IAAA,IAAI,EAAC,OADL;AAEA,IAAA,WAAW,EAAC,OAFZ;AAGA,IAAA,IAAI,EAAC,OAHL;AAIA,IAAA,OAAO,EAAErB,MAAM,CAACI,KAAP,GAAe,IAAf,GAAsB,KAJ/B;AAKA,IAAA,QAAQ,EAAEN,QAAQ,CAAC;AAACwB,MAAAA,QAAQ,EAAE;AAAX,KAAD,CALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAUE,oBAAC,YAAD;AAAc,IAAA,MAAM,EAAEtB,MAAtB;AAA8B,IAAA,IAAI,EAAC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF,eAcI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,oBAAC,KAAD;AACA,IAAA,IAAI,EAAC,UADL;AAEA,IAAA,WAAW,EAAC,UAFZ;AAGA,IAAA,IAAI,EAAC,UAHL;AAIA,IAAA,OAAO,EAAEA,MAAM,CAACK,QAAP,GAAkB,IAAlB,GAAyB,KAJlC;AAKA,IAAA,QAAQ,EAAEP,QAAQ,CAAC;AAACwB,MAAAA,QAAQ,EAAE,uBAAX;AAAqCC,MAAAA,SAAS,EAAE;AAAhD,KAAD,CALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eASE,oBAAC,YAAD;AAAc,IAAA,MAAM,EAAEvB,MAAtB;AAA8B,IAAA,IAAI,EAAC,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CAdJ,eA0BE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,KAAK,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA1BF,CADD,CADA;AAkCF;;AAED,eAAeP,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAA+BE,KAA/B,CAAf","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport {Form, Button, Label, Input, FormGroup} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { setLoggedIn } from '../store/actions/userActions';\nimport axios from 'axios';\n\nfunction Login(props) {\n\n    const { setLoggedIn } = props;\n\n    const { register, handleSubmit, errors, reset } = useForm({ \n      mode: \"onBlur\",\n      defaultValues: { \n          email: \"\", \n          password:\"\"\n      } \n    });\n\n    const loginPost = (user) => { \n      axios.post('https://comake-backend-tt76.herokuapp.com/auth/login', user)\n      .then((res) => { \n        window.localStorage.setItem('token', res.data.token)\n        alert(\"You've successfully signed in!!\")\n        setLoggedIn()        \n      })\n      .catch((error) => { \n        console.log(\"There was an error logging into the server\", error)\n      })\n    }\n\n    const onSubmit = (data) => {     \n      loginPost(data)\n      reset()\n    }\n  //console.log(\"MY ERRORS FROM LOG FORM=>\", errors)\n    \n\n\n   return (\n   <div className='auth-form-container  shadow' >\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <FormGroup>\n        <Label for=\"email\">Email</Label>\n        <Input \n        type=\"email\" \n        placeholder=\"email\" \n        name=\"email\"\n        invalid={errors.email ? true : false}\n        innerRef={register({required: \"Email is required\"})} \n      \n        />\n        <ErrorMessage errors={errors} name=\"email\" />\n      </FormGroup>\n      \n        <FormGroup>\n          <Label for=\"password\" >Password</Label>\n          <Input \n          type=\"password\" \n          placeholder=\"Password\" \n          name=\"password\" \n          invalid={errors.password ? true : false}\n          innerRef={register({required: \"Password is required.\",  maxLength: 100}, )} \n          />\n          <ErrorMessage errors={errors} name=\"password\" />\n      </FormGroup>\n\n      <Button type=\"submit\" color=\"primary\">Sign In</Button>\n      \n    </Form>\n    </div>\n    \n   )\n}\n\nexport default connect(null, { setLoggedIn })(Login);"]},"metadata":{},"sourceType":"module"}